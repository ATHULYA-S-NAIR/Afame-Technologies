# -*- coding: utf-8 -*-
"""titanic survival prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v1EnVnj19efQQTOSONaXGNWOxdrk1wuJ
"""

# Step 1: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Step 2: Load the Dataset
df = pd.read_csv('/content/Titanic-Dataset.csv')

df.head()

df.tail()

print(df.columns)

print(df.info())  # Check for null values and data types

print(df.describe())  # Summary statistics

# Step 4: Handle Missing Values
# Fill missing Age with median
df['Age'] = df['Age'].fillna(df['Age'].median())

# Fill missing Embarked with mode
df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])

# Drop Cabin (too many missing values) and PassengerId (irrelevant for prediction)
df = df.drop(['Cabin', 'PassengerId', 'Name', 'Ticket'], axis=1)

# Step 5: Encode Categorical Variables
# Convert 'Sex' and 'Embarked' into numeric values
df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})
df['Embarked'] = df['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})

#Step 6: Feature Selection
# Define features (X) and target (y)
X = df.drop('Survived', axis=1)  # Features (all other columns except 'Survived')
y = df['Survived']  # Target (Survival status)

# Step 7: Split the Data into Train and Test Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 8: Train the Model
# Using Random Forest Classifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Step 9: Evaluate the Model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Step 10: Visualize Results
# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Not Survived', 'Survived'], yticklabels=['Not Survived', 'Survived'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

